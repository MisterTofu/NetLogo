;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; Virus Genotypes ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


globals [

   VirusGenotypes          ;; Virus genotypes, dictionary {[ ContainerNumber, {[sequence, count], [sequence, count]} ]}
                           ;; The first dictionary key is the container number
                           ;; The second dictionary holds the sequences and counts of each sequence in the respective container
   TotalVirusGenotypes 
   Diversity
   VirusContainerCounts
    
]


to initVirusGenotypes
  set VirusGenotypes table:make
  set TotalVirusGenotypes [ ]
  set Diversity [ ]
  updateVirusContainerCounts 
end


to drug
    let strength DrugStrength / 100
    let newViruses [ ]
    let dp [ ]
    let rep [ ]
    foreach table:to-list VirusGenotypes [
        ;; item 0 = Container Key
        ;; item 1 = Dictionary 
        let containerKey item 0 ? 
        let drugdp 0
        let drugrep 0
        ;; Drug affected container
        
        if not(empty? filter [ containerKey = ? ] DrugContainers) [
            set drugdp DeathProbability * DrugStrength
            set drugrep ReplicationProbability * DrugStrength
        ]


        foreach (table:to-list item 1 ?) [
            ;; item 0 = sequence
            ;; item 1 = count

            let hd hammingDistance (item 0 ?) (array:item ContainerSequences containerKey)
            set dp DeathProbability + (hd / 50 * DeathProbability) + drugdp
            set rep ReplicationProbability - (hd / 50 * ReplicationProbability) - drugrep
;            print(word "Death: " dp "     Replication: " rep "       Hamming: " hd)
            
            ;; calculate how many would die/replicate            
            repeat (item 1 ? ) [ ;; Repeat the number of viruses with genotype in dictionary iteration
                ;; die
                ifelse random-float 100.0 < dp [                  
                     removeGenotype containerKey item 0 ? 
                     set VirusCounts VirusCounts - 1
                ][
                    ifelse random-float 100.0 < rep [
                        ;; Replicate - mutate first, check adjacent containers, move to container and increment counts
                        let mSeq mutateSequence (item 0 ?)  ;; mutate a sequence
                        set newViruses lput (list containerKey mSeq) newViruses
                        set VirusCounts VirusCounts + 1
                        set TotalVirusCounts TotalVirusCounts + 1

                    ][
                      if random-float 100.0 < MovementProbability [
                         let placementContainer one-of (shuffle (item containerKey AdjacentContainers))    
                         set newViruses lput (list placementContainer item 0 ?) newViruses
                         removeGenotype containerKey item 0 ?
                      ]
                    ]
                ]                           
            ]
        ]
    ]
    
   ;; merge temp dict and regular
   foreach newViruses [
        addGenotype item 0 ? item 1 ? 
   ]
end


;; Add genotype or increment it to the VirusGenotypes dict
;; If no key exists, it will create one
;; Input: container, sequence
to addGenotype [ cont seq ]
  if not (table:has-key? VirusGenotypes cont) [ table:put VirusGenotypes cont table:make ]
  ;; If entry exists increment it, if no entry exists create one
  ifelse table:has-key? (table:get VirusGenotypes cont) seq 
  [ table:put (table:get VirusGenotypes cont) seq (getGenotypeCount cont seq) + 1 ]
  [ table:put (table:get VirusGenotypes cont) seq 1 ]
  set TotalVirusGenotypes lput (hammingDistance seq VirusSequence) TotalVirusGenotypes
  set Diversity lput (convertDecimal seq) Diversity
end

to removeGenotype [ cont seq ]
    let num getGenotypeCount cont seq
    ifelse num = 1 [
        table:remove (table:get VirusGenotypes cont) seq ;; remove, count = 1
    ][
        table:put (table:get VirusGenotypes cont) seq (num - 1) ;; decrement
    ]
    let i 0
    while [ i < length TotalVirusGenotypes ] [
        if item i TotalVirusGenotypes = (hammingDistance seq VirusSequence) [
            set TotalVirusGenotypes remove-item i TotalVirusGenotypes
            set i i + length TotalVirusGenotypes
        ]
        set i i + 1
    ]
    
    set i 0
    while [ i < length Diversity ] [
        if item i Diversity = (convertDecimal seq) [
            set Diversity remove-item i Diversity
            set i i + length Diversity
        ]
        set i i + 1
    ]
end

;; Count the number of genotypes within the given container
to-report getGenotypeCount [ cont seq ]
    report table:get (table:get VirusGenotypes cont) seq
end


;; Returns a List ordered with counts of each container
to updateVirusContainerCounts 
    set VirusContainerCounts (n-values GridCount [0])
    let containerKey [ ]
    foreach table:to-list VirusGenotypes [
        set containerKey item 0 ?
        foreach table:to-list item 1 ? [
            set VirusContainerCounts replace-item containerKey VirusContainerCounts (item containerKey VirusContainerCounts + item 1 ?)
        ]
    ]
;    report VirusContainerCounts
end


;; Print Genotypes, mainly for debugging 
to printVirusGenotypes
   foreach table:to-list VirusGenotypes [ 
         print (word "Container Infected # " item 0 ? )
         foreach table:to-list (item 1 ?) [
           output-print (word item 0 ? " ==> " item 1 ?)
         ]
   ]
end

to-report allInfected?
  report empty? filter [ ? = 0 ] VirusContainerCounts
end

to-report isInfected? [ cont ]
  report item cont VirusContainerCounts > 0
end


;; Get infected count of containers
to-report getInfectedCount
  report length filter [ ? > 0 ] VirusContainerCounts 
end