;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;; Virus Genotypes ;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


globals [

   VirusGenotypes          ;; Virus genotypes, dictionary {[ ContainerNumber, {[sequence, count], [sequence, count]} ]}
                           ;; The first dictionary key is the container number
                           ;; The second dictionary holds the sequences and counts of each sequence in the respective container
   TotalVirusGenotypes 
]



to initVirusGenotypes
  set VirusGenotypes table:make
  set TotalVirusGenotypes [ ]
end


;; Requires: hammingDistance, DeathProbability, ReplicationProbability
to fitness [ cont ]
    let fit 25      ;; 25% change, based on genotype hamming distance 
    let maxHD 7
    foreach table:to-list (table:get VirusGenotypes cont) [
        let counts item 1 ?
        let sequence item 0 ?
        let hamming hammingDistance sequence (array:item ContainerSequence cont)
;        let dp 100 - fit + ( fit / maxHD * hamming) ;; Farther away from container, higher death probability
        
        
        output-print (word item 0 ? " ==> " item 1 ?)
        output-print (word "  " array:item ContainerSequence cont)
        
    ]
end







;; Backup
to drug
    let strength 0.25
    let temp table:make
    foreach table:to-list VirusGenotypes [
        let containerKey item 0 ?
        let dp DeathProbability
        let rep ReplicationProbability
        ;; Drug affected container
        if not(empty? filter [ containerKey = ? ] DrugContainers) [
            set dp DeathProbability + ( DeathProbability * strength)
            set rep ReplicationProbability - (ReplicationProbability * strength)
        ]
        foreach (table:to-list item 1 ?) [
            repeat (item 1 ? ) [ ;; Repeat the number of viruses with genotype in dictionary iteration
                ;; die
                ifelse random-float 100.0 < dp [                  
                     removeGenotype containerKey item 0 ? 
                     array:set ContainerVirusCounts containerKey ((array:item ContainerVirusCounts containerKey) - 1)
                     set VirusCount VirusCount - 1
                ][
                
                    if random-float 100.0 < rep [
                        ;; Replicate - mutate first, check adjacent containers, move to container and increment counts
                        let mutation [ ]
                        let mSeq mutateSequence (item 0 ?)  ;; mutate a sequence
                        let shuffledAdjc shuffle (item containerKey AdjacentContainers)
                        ;; Get container mutation sequences
                        foreach shuffledAdjc [ set mutation lput array:item ContainerSequence ? mutation ]          
                        
                        let partition partitionSequence mSeq MutationLength ;; MutationLength = ContainerSequenceLength
                        let placementContainer containerKey                 
                        let i 0
                        while[ i < length mutation ] [
                             ;; Check for a match with our drug sequence, filter if bits are equivilanet 
                             if not (empty? filter [? = (item i mutation)] partition ) [ 
                                 set MutationCount MutationCount + 1  
                                 set placementContainer item i shuffledAdjc
                             ]
                             set i i + 1
                        ]
                        array:set ContainerVirusCounts placementContainer ((array:item ContainerVirusCounts placementContainer) + 1)
                        set VirusCount VirusCount + 1
                        set TotalVirusCount TotalVirusCount + 1
                        incrementDict temp placementContainer mSeq
                    ]
                ]                           
            ]
        ]
    ]
    
   ;; merge temp dict and regular
   foreach table:to-list temp [
       let localContainerNumber item 0 ?
       foreach table:to-list (item 1 ?) [
           repeat item 1 ? [
               addGenotype localContainerNumber item 0 ? 
           ]
       ]
   ]
end


;; Add genotype or increment it to the VirusGenotypes dict
;; If no key exists, it will create one
;; Input: container, sequence
to addGenotype [ cont seq ]
  if not (table:has-key? VirusGenotypes cont) [ table:put VirusGenotypes cont table:make ]
  ;; If entry exists increment it, if no entry exists create one
  ifelse table:has-key? (table:get VirusGenotypes cont) seq 
  [ table:put (table:get VirusGenotypes cont) seq (getGenotypeCount cont seq) + 1 ]
  [ table:put (table:get VirusGenotypes cont) seq 1 ]
  set TotalVirusGenotypes lput seq TotalVirusGenotypes
end

to removeGenotype [ cont seq ]
    let num getGenotypeCount cont seq
    ifelse num = 1 [
        table:remove (table:get VirusGenotypes cont) seq ;; remove, count = 1
    ][
        table:put (table:get VirusGenotypes cont) seq (num - 1) ;; decrement
    ]
    let i 0
    while [ i < length TotalVirusGenotypes ] [
        if item i TotalVirusGenotypes = seq [
            set TotalVirusGenotypes remove-item i TotalVirusGenotypes
            set i i + length TotalVirusGenotypes
        ]
        set i i + 1
    ]
end

;; Count the number of genotypes within the given container
to-report getGenotypeCount [ cont seq ]
    report table:get (table:get VirusGenotypes cont) seq
end

;; Get the total virus counts 
to-report getTotalVirusGenotypeCount
     let result 0
     foreach TotalVirusGenotypes [
         set result result + item 1 ?
     ]
     report result
end

;; Print Genotypes, mainly for debugging 
to printVirusGenotypes
   foreach table:to-list VirusGenotypes [ 
         print (word "Container Infected # " item 0 ? )
         foreach table:to-list (item 1 ?) [
           output-print (word item 0 ? " ==> " item 1 ?)
         ]
   ]
end

;; Get infected count of containers
to-report getInfectedCount
  report table:length VirusGenotypes
end