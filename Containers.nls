;; Virus Containers Setup

globals [
  
     ContainerSequences       ;; Mutation sequence for each container, [list]
     AdjacentContainers      ;; Container Xs adjacent containers, [list]
     n-distance
]


to initContainers
  set n-distance 2
  set AdjacentContainers [ ]    
  let i 0  
  repeat GridCount [    
      set AdjacentContainers lput getAdjacentContainers i AdjacentContainers
      set i i + 1
  ]
   setup-containers
end

to printSequences [c1 c2]
    output-print (word "\n\n" array:item ContainerSequences c1)
    output-print array:item ContainerSequences c2
    output-print (word "  HD: " hammingDistance array:item ContainerSequences c1 array:item ContainerSequences c2)
    
end

to setup-containers 
    set ContainerSequences array:from-list n-values GridCount [n-values MutationSequenceLength [-1]]
    ;; Randomly generate the first one
    array:set ContainerSequences 0 (n-values MutationSequenceLength [one-of [0 1]])
    setSequences 0
end


;; Note first sequence must be set
to setSequences [ node ]
    ;; get the adjacent containers sequences
    let constraints (filter [ ? < node ] item node AdjacentContainers)
    let temp [ ]
    
    ifelse empty? constraints [ ;; None, this must be the at 0, flip the bits of 0 and assign it to c# 1
        flipBits node node + 1
    ][
        ifelse length constraints = 1 [ ;; Some containers only have 1 previously set container
              set temp shuffle (array:item ContainerSequences (item 0 constraints)) 
              while [ not (hammingdistance temp array:item ContainerSequences item 0 constraints = n-distance) 
                        or (temp = array:item ContainerSequences item 0 constraints)] [
                  ;; Keep shuffling container sequences, until hamming distances is n-dstance
                  set temp shuffle (array:item ContainerSequences (item 0 constraints))
              ]
        ][
            ;; two constraints and check if hamming distance is too far
             ifelse(hammingDistance array:item ContainerSequences (item 0 constraints) array:item ContainerSequences (item 1 constraints) <= (n-distance * 3)) [
               
                  set temp shuffle (array:item ContainerSequences (item random 1 constraints)) ;; Get one of the two nodes that have just been assigned
                  while [ not (hammingDistance temp array:item ContainerSequences item 0 constraints = n-distance) 
                            or not (hammingDistance temp array:item ContainerSequences item 1 constraints = n-distance) ;; while hamming is not within two of the parents
                           or (temp = array:item ContainerSequences item 0 constraints)                                 ;; Make sure they are not the same as the parents
                            or (temp = array:item ContainerSequences item 1 constraints) ][
                            
                       ;; Keep shuffling one of the two container sequences, until hamming distances match 
                       
                       set temp shuffleBits (item random 1 constraints)

                       
                   ]
             ][
                 output-print "Hamming Distance too far, Possible to restart? stopping"
                 stop
             ]
        ]
        array:set ContainerSequences node temp
    ]
;    ask patches with [container = node] [ set pcolor red ]
    ;; recursively call it
    if node + 1 < GridCount [
        setSequences node + 1
    ]
end

to-report shuffleBits [ c ]
  report shuffle (array:item ContainerSequences c)
end

;; Flips two bits in container sequence,
;; Inputs: parent index, child index
to flipBits [ main secondary ]
    if main < (GridCount - 1) and secondary < (Gridcount - 1) [
                   
    let temp array:item ContainerSequences main
    let pos n-of n-distance (n-values (MutationSequenceLength - 1) [?]) ;; get two random positions in the sequence list
    let i 0
    repeat n-distance [
        set temp replace-item (item i pos) temp ifelse-value (item (item i pos) temp = 1) [ 0 ] [ 1 ]
        set i i + 1
    ]
   array:set ContainerSequences secondary temp
   ]
end


to draw-hd
  let i 0
  let DrawSequenceColor rgb 255 255 255
  let DrawVirusCountColor rgb 0 20 148
  clear-drawing  
  repeat GridCount  [
      let xy [ ]
      ask patches with [container = i] [ set xy (list pxcor pycor) ]

;      graphics:set-text-color rgb 255 0 0
;      if (sum array:item ContainerSequences i) > 0 [
;          graphics:draw-text item 0 xy (item 1 xy + 0.7) "C"  reduce word (array:item ContainerSequences i) 
;      ]
      graphics:set-text-color DrawSequenceColor
      ; left, right, up, down
      foreach getAdjacentContainers i [
      if ((sum array:item ContainerSequences ?) >= 0 )[
          
          ifelse ((hammingdistance array:item ContainerSequences i array:item ContainerSequences ?) <= n-distance) [
              graphics:set-text-color DrawVirusCountColor
          ][ graphics:set-text-color DrawSequenceColor ]
           ifelse ? > i [ ; to the right or bottom
             ifelse (i + 1) = ? [ ; right
                     graphics:draw-text (item 0 xy + 1) (item 1 xy) "C"  (word "" hammingdistance array:item ContainerSequences i array:item ContainerSequences ?) 
             ][ ; bottom
                  graphics:draw-text (item 0 xy) (item 1 xy - 1) "C"  (word "" hammingdistance array:item ContainerSequences i array:item ContainerSequences ?) 
             ]
           ][
             ifelse (i - 1) = ? [ ; left
                 graphics:draw-text (item 0 xy - 1) (item 1 xy) "C"  (word "" hammingdistance array:item ContainerSequences i array:item ContainerSequences ?) 
             ][ ; up
                 graphics:draw-text (item 0 xy) (item 1 xy + 1) "C"  (word "" hammingdistance array:item ContainerSequences i array:item ContainerSequences ?) 
             ] 
           ]
        ]
      ]
      set i i + 1
  ]
  
  ;  foreach array:to-list ContainerSequences [ if (sum ?) > 0 [ print ? ] ]
end



